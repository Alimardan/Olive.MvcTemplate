<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Olive.Entities.Data</name>
    </assembly>
    <members>
        <member name="T:Olive.Entities.Data.DataAccess`1">
            <summary>
            ADO.NET Facade for submitting single method commands.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.GetOrCreateConnection">
            <summary>
            Creates a connection object.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.CreateConnection(System.String)">
            <summary>
            Creates a new DB Connection to database with the given connection string.
            </summary>		
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and builds an IDataReader.
            Make sure you close the data reader after finishing the work.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value of the type specified.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes a database query and returns the result as a data set.
            </summary>        
        </member>
        <member name="M:Olive.Entities.Data.DataAccess`1.ExecuteBulkNonQueries(System.Data.CommandType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Data.IDataParameter[]}})">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="T:Olive.Entities.Data.DataAccessProfiler">
            <summary>
            Provides SQL profiling services.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataAccessProfiler.GenerateReport(System.Boolean)">
            <summary>
            To invoice this you can send a request to the application using http://...?Web.Test.Command=Sql.Profile&amp;Mode=Snapshot
            </summary>
            <param name="snapshot">Determines whether the current log data should be removed (false) or kept for future combined future generated (true).</param>
        </member>
        <member name="T:Olive.Entities.Data.DataProvider`2">
            <summary>
            Provides a DataProvider for accessing data from the database using ADO.NET.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ExecuteNonQuery(System.String)">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text as nonquery.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ExecuteReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and builds an IDataReader.  Make sure you close the data reader after finishing the work.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ExecuteScalar(System.String)">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a data parameter with the specified name and value.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a data parameter with the specified name and value and type.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.Delete(Olive.Entities.IEntity)">
            <summary>
            Deletes the specified record.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.Get(System.Object)">
            <summary>
            Gets the specified record by its type and ID.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.GetList(Olive.Entities.IDatabaseQuery)">
            <summary>
            Gets the list of specified records.
            </summary>        
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.GetAssociationInclusionCriteria(Olive.Entities.IDatabaseQuery,System.Reflection.PropertyInfo)">
            <summary>
            Returns a direct database criterion used to eager load associated objects.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.ReadManyToManyRelation(Olive.Entities.IEntity,System.String)">
            <summary>
            Reads the many to many relation.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.Save(Olive.Entities.IEntity)">
            <summary>
            Saves the specified record.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.GenerateParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates data provider specific parameters for the specified data items.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DataProvider`2.GenerateParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Generates a data provider specific parameter for the specified data.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.DataProvider`2.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key used for this data provider.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.DataProvider`2.ConnectionString">
            <summary>
            Gets or sets the connection string key used for this data provider.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DbTransactionScope.OnTransactionCompleted(System.Action)">
            <summary>
            Attaches an event handler to be invoked when the current (root) transaction is completed.
            </summary>
        </member>
        <member name="T:Olive.Entities.Data.InterfaceDataProvider`1">
            <summary>
            Provides data access for Interface types.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.DatabaseContext.ConnectionString">
            <summary>
            Gets or sets the ConnectionString of this DatabaseContext.
            </summary>
        </member>
        <member name="T:Olive.Entities.Data.Database">
            <summary>
            Data access code for Application components.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Count``1">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Refresh">
            <summary>
            Clears the cache of all items.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.EnlistOrCreateTransaction(System.Func{System.Threading.Tasks.Task})">
            <summary>
            If there is an existing open transaction, it will simply run the specified action in it, Otherwise it will create a new transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Parse``1(System.String,System.Boolean)">
            <summary>
            Returns the first record of the specified type of which ToString() would return the specified text .
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.CountAllObjectsInCache">
            <summary>
            Gets the total number of objects in cache.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Reload``1(``0)">
            <summary>
            Gets a reloaded instance from the database to get a synced copy.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Any``1">
            <summary>
            Determines if there is any object in the database of the specified type.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines if there is any object in the database of the specified type matching a given criteria.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.None``1">
            <summary>
            Determines whether there is no object of the specified type in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.None``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines whether none of the objects in the database match a given criteria.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Delete(Olive.Entities.IEntity)">
            <summary>
            Deletes the specified record from the data repository.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Delete(Olive.Entities.IEntity,Olive.Entities.DeleteBehaviour)">
            <summary>
            Deletes the specified record from the data repository.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes the specified instances from the data repository.        
            The operation will be done in a transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.DeleteAll``1">
            <summary>
            Deletes all objects of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Olive.Entities.Data.Database.DeleteAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes all objects of the specified type matching the given criteria.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.UpdateAll``1(System.Action{``0})">
            <summary>
            Updates all records in the database with the specified change.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Finds an object with the specified type matching the specified criteria.
            If not found, it returns null.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get``1(System.String)">
            <summary>
            Gets an Entity of the given type with the given Id from the database.
            If it can't find the object, an exception will be thrown.
            </summary>        
            <param name="entityId">The primary key value of the object to load in string format.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get``1(System.Guid)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get``1(System.Nullable{System.Int32})">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get(System.Guid,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <param name="entityID">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Get(System.Object,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If it can't find the object, an exception will be thrown.
            </summary>
            <param name="entityID">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.GetOrDefault``1(System.Object)">
            <summary>
            Get an entity with the given type and ID from the database.
            If the key does not exist, it will return null, rather than throwing an exception.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="id">The primary key value of the object to load.</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.GetOrDefault(System.Object,System.Type)">
            <summary>
            Get an entity with the given type and ID from the database.
            If the key does not exist, it will return null, rather than throwing an exception.
            </summary>
            <param name="type">The type of the object to get</param>
            <param name="id">The primary key value of the object to load.</param>        
        </member>
        <member name="M:Olive.Entities.Data.Database.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of entities of the given type from the database.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.Database.Updated">
            <summary>
            It's raised when any record is saved or deleted in the system.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.GetRegisteredAssemblies">
            <summary>
            Gets the assemblies for which a data provider factory has been registered in the current domain.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.CreateTransactionScope(Olive.Entities.DbTransactionScopeOption)">
            <summary>
            Creates a transaction scope.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Save``1(``0)">
            <summary>
            Inserts or updates an object in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Save(Olive.Entities.IEntity,Olive.Entities.SaveBehaviour)">
            <summary>
            Inserts or updates an object in the database.
            </summary>        
        </member>
        <member name="M:Olive.Entities.Data.Database.Save``1(System.Collections.Generic.List{``0})">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Update``1(``0,System.Action{``0})">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.Update``1(``0,System.Action{``0},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.Data.Database.BulkInsert(Olive.Entities.Entity[],System.Int32,System.Boolean)">
            <summary>
            Inserts the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.BulkUpdate(Olive.Entities.Entity[],System.Int32,System.Boolean)">
            <summary>
            Updates the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Save``1(``0[])">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Save``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Database.Save``1(System.Collections.Generic.IEnumerable{``0},Olive.Entities.SaveBehaviour)">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="T:Olive.Entities.Data.AssociationInclusion">
            <summary>
            It provides a tree for the association properties
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.DatabaseQuery.Aggregate(Olive.Entities.AggregateFunction,System.String)">
            <summary>
            Gets a list of entities of the given type from the database with the specified type matching the specified criteria.
            If no criteria is specified, the count of all instances will be returned.
            </summary>        
        </member>
        <member name="M:Olive.Entities.Data.DatabaseQuery`1.Aggregate``2(Olive.Entities.AggregateFunction,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets a list of entities of the given type from the database with the specified type matching the specified criteria.
            If no criteria is specified, the count of all instances will be returned.
            </summary>        
        </member>
        <member name="T:Olive.Entities.Data.Cache">
            <summary>
            Provides a cache of objects retrieved from the database.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.Cache.Current">
            <summary>
            Gets the current cache.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Get(System.String)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Get``1(System.Object)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Get(System.Type,System.String)">
            <summary>
            Gets an entity from cache. Returns null if not found.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Add(Olive.Entities.IEntity)">
            <summary>
            Adds a given entity to the cache.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Remove(Olive.Entities.IEntity)">
            <summary>
            Removes a given entity from the cache.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.Cache.Remove(System.Type,System.Boolean)">
            <summary>
            Removes all entities of a given types from the cache.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.DataProviderModelConfigurationSection.SyncFilePath">
            <summary>
            Gets or sets the SyncFilePath of this DataProviderModelConfigurationSection.
            </summary>
        </member>
        <member name="P:Olive.Entities.Data.DataProviderModelConfigurationSection.FileDependancyPath">
            <summary>
            Gets or sets the SyncFilePath of this DataProviderModelConfigurationSection.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.GetSqlSafeValue(System.DateTime)">
            <summary>
            Returns a MS T-SQL-safe DateTime value for use in queries (i.e. prevents date values earlier than 1/1/1753).
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.ToVirtualPath(System.IO.FileInfo)">
            <summary>
            Gets a virtual URL to this file. If the file is not in the current website folder it throws an exception.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns a DataTable with columns based on the public properties of type T and the rows
            populated with the values in those properties for each item in this IEnumerable.
            </summary>
            <param name="tableName">Optional name for the DataTable (defaults to the plural of the name of type T).</param>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.CastTo``1(System.Data.DataTable)">
            <summary>
            Casts this data table's records into a list of typed objects.        
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.CastTo``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.CastAsDictionary``1(System.Data.DataTable,System.Object)">
            <summary>
            Casts this data table's records into a list of typed objects.
            <param name="propertyMappings">An anonymouse object containing property mapping information.
            e.g.: new {Property1 = "Property name in CSV", Property2 = "...", set_Property1 = new Func&lt;string, object&gt;(text => Client.Parse(value)) }</param>
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.FindPropertyMappings(System.Type,System.Data.DataColumnCollection,System.Object)">
            <summary>
            Finds the property mappings for the specified target type, CSV column names and user declared mappings.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.ParseObject``1(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Func{System.String,System.Object}})">
            <summary>
            Creates an object of the specified type with the specified data and property mappings.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.ToCSV(System.Data.DataTable)">
            <summary>
            Gets the CSV data equivalent to this data table.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.OliveExtensions.GetRows(System.Data.DataTable)">
            <summary>
            Gets the rows of this data table in a LINQ-able format..
            </summary>
        </member>
        <member name="T:Olive.Entities.Data.TransactionExtensions">
            <summary>
            Provides extension methods for transaction classes.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.TransactionExtensions.CreateScope(System.Transactions.IsolationLevel)">
            <summary>
            Creates a new transaction scope with this isolation level.
            </summary>
        </member>
        <member name="M:Olive.Entities.Data.TransactionExtensions.CreateScope(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption)">
            <summary>
            Creates a new transaction scope with this isolation level.
            </summary> public static TransactionScope CreateScope(this IsolationLevel isolationLevel, TransactionScopeOption scopeOption)
        </member>
    </members>
</doc>
