<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Olive.Services.Testing</name>
    </assembly>
    <members>
        <member name="T:Olive.Services.Testing.MyService">
            <summary>
            This simple class will not have any implementation body. It's used to invoke the service.
            </summary>
        </member>
        <member name="T:Olive.Services.Testing.MyServiceRequest">
            <summary>
            A basic C# class to contain all parameters which are logically part of your application.
            Do not add properties which are used only to establish the pipelines such as constant security keys, access tokens, etc.
            This class should be minimal and only represent what has a meaning in yoru application's domain for the purpose of integration.
            </summary>
        </member>
        <member name="T:Olive.Services.Testing.MyServiceResponse">
            <summary>
            Same as MyServiceRequest, it should only have data fields that are relevant to the domain of your application.
            Keep it pure and simple. It can have a full hierarchy such as List classes, nested objects, etc.
            </summary>
        </member>
        <member name="T:Olive.Services.Testing.My.VSProject.MyServiceImplementor">
            <summary>
            The actual service implementation. Keep it in a separate DLL (project).               
            Your Model project should not reference this DLL, but your website project should.
            This dll should reference your Model dll.
            It should be self sufficient class that can work simply from ServiceRequest and web.config data.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.My.VSProject.MyServiceImplementor.GetResponse(Olive.Services.Testing.MyServiceRequest)">
            <summary>
            In this method, write the actual implementation. Make calls to the external web service, Http, etc.
            You can use any set of implementation classes for this, including those typically generated by WSDL utilities.
            You can make several calls to the external service, establish security, read from web.config, etc.
            At the end of the process, the final relevant information should be written into an instance of MyServiceResponse and returned.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.Snapshot.GetList(System.Boolean)">
            <summary>
            Gets the list of current snapshots on disk.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.TestDatabaseGenerator.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new TestDatabaseGenerator instance.
            <param name="isTempDatabaseOptional">Determines whether use of the temp database is optional.
            When this class is used in a Unit Test project, then it must be set to false.
            For Website project, it must be set to true.</param>
            <param name="mustRenew">Specifies whether the temp database must be recreated on application start up even if it looks valid already.</param>
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.TestDatabaseGenerator.EnsurePermissions">
            <summary>
            Ensures the right permissions are configured.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.WebTestManager.IsSanityExecutionMode">
            <summary>
            Determines if the application is currently being ran by Sanity.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.WebTestManager.CreateReferenceDataBy(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Registers a factory method that should be invoked upon creation of a new database to create reference objects.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.WebTestManager.IsTddExecutionMode">
            <summary>
            Determines whether the application is running under Temp database mode.
            </summary>
        </member>
        <member name="M:Olive.Services.Testing.WebTestManager.DispatchTasksList">
            <summary>
            To invoke this, send a request to /?web.test.command=tasks
            </summary>
        </member>
    </members>
</doc>
